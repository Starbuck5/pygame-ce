/*
    pygame-ce - Python Game Library
    Copyright (C) 2000-2001  Pete Shinners

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Pete Shinners
    pete@shinners.org
*/

/* This will use PYGAMEAPI_EXTERN_SLOTS instead
 * of PYGAMEAPI_DEFINE_SLOTS for base modules.
 */
#ifndef _PYGAME_INTERNAL_H
#define _PYGAME_INTERNAL_H

#include "pgplatform.h"
/*
    If PY_SSIZE_T_CLEAN is defined before including Python.h, length is a
    Py_ssize_t rather than an int for all # variants of formats (s#, y#, etc.)
*/
#define PY_SSIZE_T_CLEAN
#include <Python.h>

/* Ensure PyPy-specific code is not in use when running on GraalPython (PR
 * #2580) */
#if defined(GRAALVM_PYTHON) && defined(PYPY_VERSION)
#undef PYPY_VERSION
#endif

// use SDL3 built in name translation (when possible) for now.
#define SDL_ENABLE_OLD_NAMES

#include <SDL.h>

/* IS_SDLv2 is 1 if at least SDL 2.0.0, 0 otherwise */
/* IS_SDLv3 is 1 if at least SDL 3.0.0, 0 otherwise */
#if (SDL_VERSION_ATLEAST(3, 0, 0))
#define IS_SDLv3 1
#define IS_SDLv2 0
#else
#define IS_SDLv3 0
#define IS_SDLv2 1
#endif

#if SDL_BYTEORDER == SDL_LIL_ENDIAN
#define PG_PIXELFORMAT_BGRX SDL_PIXELFORMAT_XBGR8888
#else
#define PG_PIXELFORMAT_BGRX SDL_PIXELFORMAT_BGRX8888
#endif

#if IS_SDLv2
#define PG_AtomicInt SDL_atomic_t
#define PG_GetAudioStreamAvailable SDL_AudioStreamAvailable
#define PG_ClearAudioStream SDL_AudioStreamClear
#define PG_FlushAudioStream SDL_AudioStreamFlush
#define PG_GetAudioStreamData SDL_AudioStreamGet
#define PG_PutAudioStreamData SDL_AudioStreamPut
#define PG_DestroyAudioStream SDL_FreeAudioStream
#define PG_free SDL_FreeWAV
#define PG_CreateAudioStream SDL_NewAudioStream
#define PG_EVENT_DID_ENTER_BACKGROUND SDL_APP_DIDENTERBACKGROUND
#define PG_EVENT_DID_ENTER_FOREGROUND SDL_APP_DIDENTERFOREGROUND
#define PG_EVENT_LOW_MEMORY SDL_APP_LOWMEMORY
#define PG_EVENT_TERMINATING SDL_APP_TERMINATING
#define PG_EVENT_WILL_ENTER_BACKGROUND SDL_APP_WILLENTERBACKGROUND
#define PG_EVENT_WILL_ENTER_FOREGROUND SDL_APP_WILLENTERFOREGROUND
#define PG_EVENT_AUDIO_DEVICE_ADDED SDL_AUDIODEVICEADDED
#define PG_EVENT_AUDIO_DEVICE_REMOVED SDL_AUDIODEVICEREMOVED
#define PG_EVENT_CLIPBOARD_UPDATE SDL_CLIPBOARDUPDATE
#define PG_EVENT_GAMEPAD_AXIS_MOTION SDL_CONTROLLERAXISMOTION
#define PG_EVENT_GAMEPAD_BUTTON_DOWN SDL_CONTROLLERBUTTONDOWN
#define PG_EVENT_GAMEPAD_BUTTON_UP SDL_CONTROLLERBUTTONUP
#define PG_EVENT_GAMEPAD_ADDED SDL_CONTROLLERDEVICEADDED
#define PG_EVENT_GAMEPAD_REMAPPED SDL_CONTROLLERDEVICEREMAPPED
#define PG_EVENT_GAMEPAD_REMOVED SDL_CONTROLLERDEVICEREMOVED
#define PG_EVENT_GAMEPAD_SENSOR_UPDATE SDL_CONTROLLERSENSORUPDATE
#define PG_EVENT_GAMEPAD_TOUCHPAD_DOWN SDL_CONTROLLERTOUCHPADDOWN
#define PG_EVENT_GAMEPAD_TOUCHPAD_MOTION SDL_CONTROLLERTOUCHPADMOTION
#define PG_EVENT_GAMEPAD_TOUCHPAD_UP SDL_CONTROLLERTOUCHPADUP
#define PG_GamepadAxisEvent SDL_ControllerAxisEvent
#define PG_GamepadButtonEvent SDL_ControllerButtonEvent
#define PG_GamepadDeviceEvent SDL_ControllerDeviceEvent
#define PG_GamepadSensorEvent SDL_ControllerSensorEvent
#define PG_GamepadTouchpadEvent SDL_ControllerTouchpadEvent
#define PG_EVENT_DISPLAY_CONNECTED SDL_DISPLAYEVENT_CONNECTED
#define PG_EVENT_DISPLAY_DISCONNECTED SDL_DISPLAYEVENT_DISCONNECTED
#define PG_EVENT_DISPLAY_MOVED SDL_DISPLAYEVENT_MOVED
#define PG_EVENT_DISPLAY_ORIENTATION SDL_DISPLAYEVENT_ORIENTATION
#define PG_EVENT_DROP_BEGIN SDL_DROPBEGIN
#define PG_EVENT_DROP_COMPLETE SDL_DROPCOMPLETE
#define PG_EVENT_DROP_FILE SDL_DROPFILE
#define PG_EVENT_DROP_TEXT SDL_DROPTEXT
#define PG_EVENT_FINGER_DOWN SDL_FINGERDOWN
#define PG_EVENT_FINGER_MOTION SDL_FINGERMOTION
#define PG_EVENT_FINGER_UP SDL_FINGERUP
#define PG_EVENT_FIRST SDL_FIRSTEVENT
#define PG_EVENT_JOYSTICK_AXIS_MOTION SDL_JOYAXISMOTION
#define PG_EVENT_JOYSTICK_BATTERY_UPDATED SDL_JOYBATTERYUPDATED
#define PG_EVENT_JOYSTICK_BUTTON_DOWN SDL_JOYBUTTONDOWN
#define PG_EVENT_JOYSTICK_BUTTON_UP SDL_JOYBUTTONUP
#define PG_EVENT_JOYSTICK_ADDED SDL_JOYDEVICEADDED
#define PG_EVENT_JOYSTICK_REMOVED SDL_JOYDEVICEREMOVED
#define PG_EVENT_JOYSTICK_HAT_MOTION SDL_JOYHATMOTION
#define PG_EVENT_KEY_DOWN SDL_KEYDOWN
#define PG_EVENT_KEYMAP_CHANGED SDL_KEYMAPCHANGED
#define PG_EVENT_KEY_UP SDL_KEYUP
#define PG_EVENT_LAST SDL_LASTEVENT
#define PG_EVENT_LOCALE_CHANGED SDL_LOCALECHANGED
#define PG_EVENT_MOUSE_BUTTON_DOWN SDL_MOUSEBUTTONDOWN
#define PG_EVENT_MOUSE_BUTTON_UP SDL_MOUSEBUTTONUP
#define PG_EVENT_MOUSE_MOTION SDL_MOUSEMOTION
#define PG_EVENT_MOUSE_WHEEL SDL_MOUSEWHEEL
#define PG_EVENT_POLL_SENTINEL SDL_POLLSENTINEL
#define PG_EVENT_QUIT SDL_QUIT
#define PG_EVENT_RENDER_DEVICE_RESET SDL_RENDER_DEVICE_RESET
#define PG_EVENT_RENDER_TARGETS_RESET SDL_RENDER_TARGETS_RESET
#define PG_EVENT_SENSOR_UPDATE SDL_SENSORUPDATE
#define PG_EVENT_SYSWM SDL_SYSWMEVENT
#define PG_EVENT_TEXT_EDITING SDL_TEXTEDITING
#define PG_EVENT_TEXT_EDITING_EXT SDL_TEXTEDITING_EXT
#define PG_EVENT_TEXT_INPUT SDL_TEXTINPUT
#define PG_EVENT_USER SDL_USEREVENT
#define PG_EVENT_WINDOW_CLOSE_REQUESTED SDL_WINDOWEVENT_CLOSE
#define PG_EVENT_WINDOW_DISPLAY_CHANGED SDL_WINDOWEVENT_DISPLAY_CHANGED
#define PG_EVENT_WINDOW_MOUSE_ENTER SDL_WINDOWEVENT_ENTER
#define PG_EVENT_WINDOW_EXPOSED SDL_WINDOWEVENT_EXPOSED
#define PG_EVENT_WINDOW_FOCUS_GAINED SDL_WINDOWEVENT_FOCUS_GAINED
#define PG_EVENT_WINDOW_FOCUS_LOST SDL_WINDOWEVENT_FOCUS_LOST
#define PG_EVENT_WINDOW_HIDDEN SDL_WINDOWEVENT_HIDDEN
#define PG_EVENT_WINDOW_HIT_TEST SDL_WINDOWEVENT_HIT_TEST
#define PG_EVENT_WINDOW_ICCPROF_CHANGED SDL_WINDOWEVENT_ICCPROF_CHANGED
#define PG_EVENT_WINDOW_MOUSE_LEAVE SDL_WINDOWEVENT_LEAVE
#define PG_EVENT_WINDOW_MAXIMIZED SDL_WINDOWEVENT_MAXIMIZED
#define PG_EVENT_WINDOW_MINIMIZED SDL_WINDOWEVENT_MINIMIZED
#define PG_EVENT_WINDOW_MOVED SDL_WINDOWEVENT_MOVED
#define PG_EVENT_WINDOW_RESIZED SDL_WINDOWEVENT_RESIZED
#define PG_EVENT_WINDOW_RESTORED SDL_WINDOWEVENT_RESTORED
#define PG_EVENT_WINDOW_SHOWN SDL_WINDOWEVENT_SHOWN
#define PG_EVENT_WINDOW_PIXEL_SIZE_CHANGED SDL_WINDOWEVENT_SIZE_CHANGED
#define PG_EVENT_WINDOW_TAKE_FOCUS SDL_WINDOWEVENT_TAKE_FOCUS
#define PG_GAMEPAD_AXIS_INVALID SDL_CONTROLLER_AXIS_INVALID
#define PG_GAMEPAD_AXIS_LEFTX SDL_CONTROLLER_AXIS_LEFTX
#define PG_GAMEPAD_AXIS_LEFTY SDL_CONTROLLER_AXIS_LEFTY
#define PG_GAMEPAD_AXIS_MAX SDL_CONTROLLER_AXIS_MAX
#define PG_GAMEPAD_AXIS_RIGHTX SDL_CONTROLLER_AXIS_RIGHTX
#define PG_GAMEPAD_AXIS_RIGHTY SDL_CONTROLLER_AXIS_RIGHTY
#define PG_GAMEPAD_AXIS_LEFT_TRIGGER SDL_CONTROLLER_AXIS_TRIGGERLEFT
#define PG_GAMEPAD_AXIS_RIGHT_TRIGGER SDL_CONTROLLER_AXIS_TRIGGERRIGHT
#define PG_GAMEPAD_BINDTYPE_AXIS SDL_CONTROLLER_BINDTYPE_AXIS
#define PG_GAMEPAD_BINDTYPE_BUTTON SDL_CONTROLLER_BINDTYPE_BUTTON
#define PG_GAMEPAD_BINDTYPE_HAT SDL_CONTROLLER_BINDTYPE_HAT
#define PG_GAMEPAD_BINDTYPE_NONE SDL_CONTROLLER_BINDTYPE_NONE
#define PG_GAMEPAD_BUTTON_A SDL_CONTROLLER_BUTTON_A
#define PG_GAMEPAD_BUTTON_B SDL_CONTROLLER_BUTTON_B
#define PG_GAMEPAD_BUTTON_BACK SDL_CONTROLLER_BUTTON_BACK
#define PG_GAMEPAD_BUTTON_DPAD_DOWN SDL_CONTROLLER_BUTTON_DPAD_DOWN
#define PG_GAMEPAD_BUTTON_DPAD_LEFT SDL_CONTROLLER_BUTTON_DPAD_LEFT
#define PG_GAMEPAD_BUTTON_DPAD_RIGHT SDL_CONTROLLER_BUTTON_DPAD_RIGHT
#define PG_GAMEPAD_BUTTON_DPAD_UP SDL_CONTROLLER_BUTTON_DPAD_UP
#define PG_GAMEPAD_BUTTON_GUIDE SDL_CONTROLLER_BUTTON_GUIDE
#define PG_GAMEPAD_BUTTON_INVALID SDL_CONTROLLER_BUTTON_INVALID
#define PG_GAMEPAD_BUTTON_LEFT_SHOULDER SDL_CONTROLLER_BUTTON_LEFTSHOULDER
#define PG_GAMEPAD_BUTTON_LEFT_STICK SDL_CONTROLLER_BUTTON_LEFTSTICK
#define PG_GAMEPAD_BUTTON_MAX SDL_CONTROLLER_BUTTON_MAX
#define PG_GAMEPAD_BUTTON_MISC1 SDL_CONTROLLER_BUTTON_MISC1
#define PG_GAMEPAD_BUTTON_PADDLE1 SDL_CONTROLLER_BUTTON_PADDLE1
#define PG_GAMEPAD_BUTTON_PADDLE2 SDL_CONTROLLER_BUTTON_PADDLE2
#define PG_GAMEPAD_BUTTON_PADDLE3 SDL_CONTROLLER_BUTTON_PADDLE3
#define PG_GAMEPAD_BUTTON_PADDLE4 SDL_CONTROLLER_BUTTON_PADDLE4
#define PG_GAMEPAD_BUTTON_RIGHT_SHOULDER SDL_CONTROLLER_BUTTON_RIGHTSHOULDER
#define PG_GAMEPAD_BUTTON_RIGHT_STICK SDL_CONTROLLER_BUTTON_RIGHTSTICK
#define PG_GAMEPAD_BUTTON_START SDL_CONTROLLER_BUTTON_START
#define PG_GAMEPAD_BUTTON_TOUCHPAD SDL_CONTROLLER_BUTTON_TOUCHPAD
#define PG_GAMEPAD_BUTTON_X SDL_CONTROLLER_BUTTON_X
#define PG_GAMEPAD_BUTTON_Y SDL_CONTROLLER_BUTTON_Y
#define PG_GAMEPAD_TYPE_AMAZON_LUNA SDL_CONTROLLER_TYPE_AMAZON_LUNA
#define PG_GAMEPAD_TYPE_GOOGLE_STADIA SDL_CONTROLLER_TYPE_GOOGLE_STADIA
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT \
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR \
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT \
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO \
    SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO
#define PG_GAMEPAD_TYPE_NVIDIA_SHIELD SDL_CONTROLLER_TYPE_NVIDIA_SHIELD
#define PG_GAMEPAD_TYPE_PS3 SDL_CONTROLLER_TYPE_PS3
#define PG_GAMEPAD_TYPE_PS4 SDL_CONTROLLER_TYPE_PS4
#define PG_GAMEPAD_TYPE_PS5 SDL_CONTROLLER_TYPE_PS5
#define PG_GAMEPAD_TYPE_UNKNOWN SDL_CONTROLLER_TYPE_UNKNOWN
#define PG_GAMEPAD_TYPE_VIRTUAL SDL_CONTROLLER_TYPE_VIRTUAL
#define PG_GAMEPAD_TYPE_XBOX360 SDL_CONTROLLER_TYPE_XBOX360
#define PG_GAMEPAD_TYPE_XBOXONE SDL_CONTROLLER_TYPE_XBOXONE
#define PG_Gamepad SDL_GameController
#define PG_AddGamepadMapping SDL_GameControllerAddMapping
#define PG_AddGamepadMappingsFromFile SDL_GameControllerAddMappingsFromFile
#define PG_AddGamepadMappingsFromRW SDL_GameControllerAddMappingsFromRW
#define PG_GamepadAxis SDL_GameControllerAxis
#define PG_GamepadBindingType SDL_GameControllerBindType
#define PG_GamepadButton SDL_GameControllerButton
#define PG_GamepadBinding SDL_GameControllerButtonBind
#define PG_CloseGamepad SDL_GameControllerClose
#define PG_GetGamepadFromInstanceID SDL_GameControllerFromInstanceID
#define PG_GetGamepadFromPlayerIndex SDL_GameControllerFromPlayerIndex
#define PG_GetGamepadAppleSFSymbolsNameForAxis \
    SDL_GameControllerGetAppleSFSymbolsNameForAxis
#define PG_GetGamepadAppleSFSymbolsNameForButton \
    SDL_GameControllerGetAppleSFSymbolsNameForButton
#define PG_GamepadConnected SDL_GameControllerGetAttached
#define PG_GetGamepadAxis SDL_GameControllerGetAxis
#define PG_GetGamepadAxisFromString SDL_GameControllerGetAxisFromString
#define PG_GetGamepadBindForAxis SDL_GameControllerGetBindForAxis
#define PG_GetGamepadBindForButton SDL_GameControllerGetBindForButton
#define PG_GetGamepadButton SDL_GameControllerGetButton
#define PG_GetGamepadButtonFromString SDL_GameControllerGetButtonFromString
#define PG_GetGamepadFirmwareVersion SDL_GameControllerGetFirmwareVersion
#define PG_GetGamepadJoystick SDL_GameControllerGetJoystick
#define PG_GetNumGamepadTouchpadFingers SDL_GameControllerGetNumTouchpadFingers
#define PG_GetNumGamepadTouchpads SDL_GameControllerGetNumTouchpads
#define PG_GetGamepadPlayerIndex SDL_GameControllerGetPlayerIndex
#define PG_GetGamepadProduct SDL_GameControllerGetProduct
#define PG_GetGamepadProductVersion SDL_GameControllerGetProductVersion
#define PG_GetGamepadSensorData SDL_GameControllerGetSensorData
#define PG_GetGamepadSensorDataRate SDL_GameControllerGetSensorDataRate
#define PG_GetGamepadSerial SDL_GameControllerGetSerial
#define PG_GetGamepadStringForAxis SDL_GameControllerGetStringForAxis
#define PG_GetGamepadStringForButton SDL_GameControllerGetStringForButton
#define PG_GetGamepadTouchpadFinger SDL_GameControllerGetTouchpadFinger
#define PG_GetGamepadType SDL_GameControllerGetType
#define PG_GetGamepadVendor SDL_GameControllerGetVendor
#define PG_GamepadHasAxis SDL_GameControllerHasAxis
#define PG_GamepadHasButton SDL_GameControllerHasButton
#define PG_GamepadHasLED SDL_GameControllerHasLED
#define PG_GamepadHasRumble SDL_GameControllerHasRumble
#define PG_GamepadHasRumbleTriggers SDL_GameControllerHasRumbleTriggers
#define PG_GamepadHasSensor SDL_GameControllerHasSensor
#define PG_GamepadSensorEnabled SDL_GameControllerIsSensorEnabled
#define PG_GetGamepadMapping SDL_GameControllerMapping
#define PG_GetGamepadMappingForGUID SDL_GameControllerMappingForGUID
#define PG_GetGamepadMappingForIndex SDL_GameControllerMappingForIndex
#define PG_GetGamepadName SDL_GameControllerName
#define PG_GetNumGamepadMappings SDL_GameControllerNumMappings
#define PG_OpenGamepad SDL_GameControllerOpen
#define PG_GetGamepadPath SDL_GameControllerPath
#define PG_RumbleGamepad SDL_GameControllerRumble
#define PG_RumbleGamepadTriggers SDL_GameControllerRumbleTriggers
#define PG_SendGamepadEffect SDL_GameControllerSendEffect
#define PG_SetGamepadLED SDL_GameControllerSetLED
#define PG_SetGamepadPlayerIndex SDL_GameControllerSetPlayerIndex
#define PG_SetGamepadSensorEnabled SDL_GameControllerSetSensorEnabled
#define PG_GamepadType SDL_GameControllerType
#define PG_UpdateGamepads SDL_GameControllerUpdate
#define PG_INIT_GAMEPAD SDL_INIT_GAMECONTROLLER
#define PG_IsGamepad SDL_IsGameController
#define PG_JOYSTICK_TYPE_GAMEPAD SDL_JOYSTICK_TYPE_GAMECONTROLLER
#define PG_AttachVirtualJoystick SDL_JoystickAttachVirtual
#define PG_AttachVirtualJoystickEx SDL_JoystickAttachVirtualEx
#define PG_CloseJoystick SDL_JoystickClose
#define PG_GetJoystickPowerLevel SDL_JoystickCurrentPowerLevel
#define PG_DetachVirtualJoystick SDL_JoystickDetachVirtual
#define PG_GetJoystickFromInstanceID SDL_JoystickFromInstanceID
#define PG_GetJoystickFromPlayerIndex SDL_JoystickFromPlayerIndex
#define PG_JoystickConnected SDL_JoystickGetAttached
#define PG_GetJoystickAxis SDL_JoystickGetAxis
#define PG_GetJoystickAxisInitialState SDL_JoystickGetAxisInitialState
#define PG_GetJoystickButton SDL_JoystickGetButton
#define PG_GetJoystickFirmwareVersion SDL_JoystickGetFirmwareVersion
#define PG_GetJoystickGUID SDL_JoystickGetGUID
#define PG_GetJoystickGUIDFromString SDL_JoystickGetGUIDFromString
#define PG_GetJoystickGUIDString SDL_JoystickGetGUIDString
#define PG_GetJoystickHat SDL_JoystickGetHat
#define PG_GetJoystickPlayerIndex SDL_JoystickGetPlayerIndex
#define PG_GetJoystickProduct SDL_JoystickGetProduct
#define PG_GetJoystickProductVersion SDL_JoystickGetProductVersion
#define PG_GetJoystickSerial SDL_JoystickGetSerial
#define PG_GetJoystickType SDL_JoystickGetType
#define PG_GetJoystickVendor SDL_JoystickGetVendor
#define PG_GetJoystickInstanceID SDL_JoystickInstanceID
#define PG_IsJoystickVirtual SDL_JoystickIsVirtual
#define PG_GetJoystickName SDL_JoystickName
#define PG_GetNumJoystickAxes SDL_JoystickNumAxes
#define PG_GetNumJoystickButtons SDL_JoystickNumButtons
#define PG_GetNumJoystickHats SDL_JoystickNumHats
#define PG_OpenJoystick SDL_JoystickOpen
#define PG_GetJoystickPath SDL_JoystickPath
#define PG_RumbleJoystick SDL_JoystickRumble
#define PG_RumbleJoystickTriggers SDL_JoystickRumbleTriggers
#define PG_SendJoystickEffect SDL_JoystickSendEffect
#define PG_SetJoystickLED SDL_JoystickSetLED
#define PG_SetJoystickPlayerIndex SDL_JoystickSetPlayerIndex
#define PG_SetJoystickVirtualAxis SDL_JoystickSetVirtualAxis
#define PG_SetJoystickVirtualButton SDL_JoystickSetVirtualButton
#define PG_SetJoystickVirtualHat SDL_JoystickSetVirtualHat
#define PG_UpdateJoysticks SDL_JoystickUpdate
#define PG_ScreenKeyboardShown SDL_IsScreenKeyboardShown
#define PG_TextInputActive SDL_IsTextInputActive
#define PG_TextInputShown SDL_IsTextInputShown
#define PG_KMOD_ALT KMOD_ALT
#define PG_KMOD_CAPS KMOD_CAPS
#define PG_KMOD_CTRL KMOD_CTRL
#define PG_KMOD_GUI KMOD_GUI
#define PG_KMOD_LALT KMOD_LALT
#define PG_KMOD_LCTRL KMOD_LCTRL
#define PG_KMOD_LGUI KMOD_LGUI
#define PG_KMOD_LSHIFT KMOD_LSHIFT
#define PG_KMOD_MODE KMOD_MODE
#define PG_KMOD_NONE KMOD_NONE
#define PG_KMOD_NUM KMOD_NUM
#define PG_KMOD_RALT KMOD_RALT
#define PG_KMOD_RCTRL KMOD_RCTRL
#define PG_KMOD_RESERVED KMOD_RESERVED
#define PG_KMOD_RGUI KMOD_RGUI
#define PG_KMOD_RSHIFT KMOD_RSHIFT
#define PG_KMOD_SCROLL KMOD_SCROLL
#define PG_KMOD_SHIFT KMOD_SHIFT
#define PG_DestroyCursor SDL_FreeCursor
#define PG_CreatePixelFormat SDL_AllocFormat
#define PG_CreatePalette SDL_AllocPalette
#define PG_DestroyPixelFormat SDL_FreeFormat
#define PG_DestroyPalette SDL_FreePalette
#define PG_GetPixelFormatEnumForMasks SDL_MasksToPixelFormatEnum
#define PG_GetMasksForPixelFormatEnum SDL_PixelFormatEnumToMasks
#define PG___IOS__ __IPHONEOS__
#define PG___MACOS__ __MACOSX__
#define PG_GetRectEnclosingPointsFloat SDL_EncloseFPoints
#define PG_GetRectEnclosingPoints SDL_EnclosePoints
#define PG_RectEmptyFloat SDL_FRectEmpty
#define PG_RectsEqualFloat SDL_FRectEquals
#define PG_RectsEqualEpsilon SDL_FRectEqualsEpsilon
#define PG_HasRectIntersection SDL_HasIntersection
#define PG_HasRectIntersectionFloat SDL_HasIntersectionF
#define PG_GetRectIntersectionFloat SDL_IntersectFRect
#define PG_GetRectAndLineIntersectionFloat SDL_IntersectFRectAndLine
#define PG_GetRectIntersection SDL_IntersectRect
#define PG_GetRectAndLineIntersection SDL_IntersectRectAndLine
#define PG_PointInRectFloat SDL_PointInFRect
#define PG_RectsEqual SDL_RectEquals
#define PG_GetRectUnionFloat SDL_UnionFRect
#define PG_GetRectUnion SDL_UnionRect
#define PG_GetCurrentRenderOutputSize SDL_GetRendererOutputSize
#define PG_RenderTextureRotated SDL_RenderCopyExF
#define PG_RenderTexture SDL_RenderCopyF
#define PG_RenderLine SDL_RenderDrawLineF
#define PG_RenderLines SDL_RenderDrawLinesF
#define PG_RenderPoint SDL_RenderDrawPointF
#define PG_RenderPoints SDL_RenderDrawPointsF
#define PG_RenderRect SDL_RenderDrawRectF
#define PG_RenderRects SDL_RenderDrawRectsF
#define PG_RenderFillRect SDL_RenderFillRectF
#define PG_RenderFillRects SDL_RenderFillRectsF
#define PG_GetRenderClipRect SDL_RenderGetClipRect
#define PG_GetRenderLogicalPresentation SDL_RenderGetLogicalSize
#define PG_GetRenderMetalCommandEncoder SDL_RenderGetMetalCommandEncoder
#define PG_GetRenderMetalLayer SDL_RenderGetMetalLayer
#define PG_GetRenderScale SDL_RenderGetScale
#define PG_GetRenderViewport SDL_RenderGetViewport
#define PG_GetRenderWindow SDL_RenderGetWindow
#define PG_RenderClipEnabled SDL_RenderIsClipEnabled
#define PG_RenderCoordinatesToWindow SDL_RenderLogicalToWindow
#define PG_SetRenderClipRect SDL_RenderSetClipRect
#define PG_SetRenderLogicalPresentation SDL_RenderSetLogicalSize
#define PG_SetRenderScale SDL_RenderSetScale
#define PG_SetRenderVSync SDL_RenderSetVSync
#define PG_SetRenderViewport SDL_RenderSetViewport
#define PG_RenderCoordinatesFromWindow SDL_RenderWindowToLogical
#define PG_SCALEMODE_BEST SDL_ScaleModeBest
#define PG_SCALEMODE_LINEAR SDL_ScaleModeLinear
#define PG_SCALEMODE_NEAREST SDL_ScaleModeNearest
#define PG_RW_SEEK_CUR RW_SEEK_CUR
#define PG_RW_SEEK_END RW_SEEK_END
#define PG_RW_SEEK_SET RW_SEEK_SET
#define PG_CreateRW SDL_AllocRW
#define PG_DestroyRW SDL_FreeRW
#define PG_CloseSensor SDL_SensorClose
#define PG_GetSensorFromInstanceID SDL_SensorFromInstanceID
#define PG_GetSensorData SDL_SensorGetData
#define PG_GetSensorInstanceID SDL_SensorGetInstanceID
#define PG_GetSensorName SDL_SensorGetName
#define PG_GetSensorNonPortableType SDL_SensorGetNonPortableType
#define PG_GetSensorType SDL_SensorGetType
#define PG_OpenSensor SDL_SensorOpen
#define PG_UpdateSensors SDL_SensorUpdate
#define PG_FillSurfaceRect SDL_FillRect
#define PG_FillSurfaceRects SDL_FillRects
#define PG_DestroySurface SDL_FreeSurface
#define PG_GetSurfaceClipRect SDL_GetClipRect
#define PG_GetSurfaceColorKey SDL_GetColorKey
#define PG_SurfaceHasColorKey SDL_HasColorKey
#define PG_SurfaceHasRLE SDL_HasSurfaceRLE
#define PG_BlitSurfaceUnchecked SDL_LowerBlit
#define PG_BlitSurfaceUncheckedScaled SDL_LowerBlitScaled
#define PG_SetSurfaceClipRect SDL_SetClipRect
#define PG_SetSurfaceColorKey SDL_SetColorKey
#define PG_BlitSurface SDL_UpperBlit
#define PG_BlitSurfaceScaled SDL_UpperBlitScaled
#define PG_GetRenderD3D11Device SDL_RenderGetD3D11Device
#define PG_GetRenderD3D9Device SDL_RenderGetD3D9Device
#if SDL_VERSION_ATLEAST(2, 0, 18)
#define PG_GetTicks SDL_GetTicks64
#else
#define PG_GetTicks SDL_GetTicks
#endif /* SDL_VERSION_ATLEAST(2, 0, 18) */
#define PG_GetClosestFullscreenDisplayMode SDL_GetClosestDisplayMode
#define PG_GetDisplayForPoint SDL_GetPointDisplayIndex
#define PG_GetDisplayForRect SDL_GetRectDisplayIndex
#define PG_GetDisplayForWindow SDL_GetWindowDisplayIndex
#define PG_GetWindowFullscreenMode SDL_GetWindowDisplayMode
#define PG_ScreenSaverEnabled SDL_IsScreenSaverEnabled
#define PG_SetWindowFullscreenMode SDL_SetWindowDisplayMode
#define PG_WINDOW_MOUSE_GRABBED SDL_WINDOW_INPUT_GRABBED
#define PG_INIT_NOPARACHUTE SDL_INIT_NOPARACHUTE
#define PG_NOSDL3_JOYBALLMOTION SDL_JOYBALLMOTION
#define PG_NOSDL3_MULTIGESTURE SDL_MULTIGESTURE
#define PG_NOSDL3_AUDIO_U16LSB AUDIO_U16LSB
#define PG_NOSDL3_AUDIO_U16MSB AUDIO_U16MSB
#define PG_NOSDL3_AUDIO_U16 AUDIO_U16
#define PG_NOSDL3_AUDIO_U16SYS AUDIO_U16SYS
#define PG_NOSDL3_WINDOW_SHOWN SDL_WINDOW_SHOWN
#define PG_GetCurrentDisplayMode SDL_GetCurrentDisplayMode
#define PG_DISPLAY_MODE_W w
#define PG_DISPLAY_MODE_H h

static int
PG_GetWindowWMInfo(SDL_Window *win, SDL_SysWMinfo *info)
{
    SDL_VERSION(info->version);
    return SDL_GetWindowWMInfo(win, info);
}

#define PG_IS_WINDOWEVENT(eventtype) (eventtype == SDL_WINDOWEVENT)
#define PG_EXTRACT_WINDOWEVENT_TYPE(event) event->window.event

static SDL_Surface *
PG_CreateSurface(int width, int height, Uint32 format)
{
    SDL_CreateRGBSurfaceWithFormat(0, width, height, 0, format);
}

static SDL_Surface *
PG_CreateSurfaceFrom(void *pixels, int width, int height, int pitch,
                     Uint32 format)
{
    SDL_CreateRGBSurfaceWithFormatFrom(pixels, 0, width, height, 0, pitch,
                                       format);
}

static Uint32
PG_GetMouseState(float *x, float *y)
{
    int ix, iy;
    Uint32 res = SDL_GetMouseState(&ix, &iy);

    *x = (float)ix;
    *y = (float)iy;

    return res;
}

static Uint32
PG_GetGlobalMouseState(float *x, float *y)
{
    int ix, iy;
    Uint32 res = SDL_GetGlobalMouseState(&ix, &iy);

    *x = (float)ix;
    *y = (float)iy;

    return res;
}

static Uint32
PG_GetRelativeMouseState(float *x, float *y)
{
    int ix, iy;
    Uint32 res = SDL_GetRelativeMouseState(&ix, &iy);

    *x = (float)ix;
    *y = (float)iy;

    return res;
}

#define PG_NOSDL3_SetWindowGammaRamp SDL_SetWindowGammaRamp
#define PG_NOSDL3_CalculateGammaRamp SDL_CalculateGammaRamp

#define PG_CreateWindowWithPosition SDL_CreateWindow

#define PG_CreateDefaultBackendRenderer(win, flags) \
    SDL_CreateRenderer(win, -1, flags)

#define PG_GL_GetSwapInterval SDL_GL_GetSwapInterval
#define PG_GL_GetWindowSizeInPixels SDL_GL_GetDrawableSize
#define PG_NOSDL3_HACK_WINDOW_FULLSCREEN_DESKTOP SDL_WINDOW_FULLSCREEN_DESKTOP

#define PG_GetNumVideoDisplays SDL_GetNumVideoDisplays

static int
PG_ShowCursor(void)
{
    return SDL_ShowCursor(SDL_ENABLE);
}

static int
PG_HideCursor(void)
{
    return SDL_ShowCursor(SDL_DISABLE);
}

static SDL_bool
PG_CursorVisible(void)
{
    return SDL_ShowCursor(SDL_QUERY) ? SDL_TRUE : SDL_FALSE;
}

static SDL_bool
PG_EventEnabled(Uint32 type)
{
    return SDL_EventState(type, SDL_QUERY);
}

static void
PG_SetEventEnabled(Uint32 type, SDL_bool enabled)
{
    SDL_EventState(type, enabled ? SDL_ENABLE : SDL_IGNORE);
}

#define PG_GetJoystickInstanceGUID SDL_JoystickGetDeviceGUID

#define PG_GAXIS caxis
#define PG_GBUTTON cbutton
#define PG_GDEVICE cdevice
#define PG_GTOUCHPAD ctouchpad
#define PG_GSENSOR csensor

static SDL_Surface *
PG_ConvertSurface(SDL_Surface *surface, const SDL_PixelFormat *format)
{
    SDL_ConvertSurface(surface, format, 0);
}

static SDL_Surface *
PG_ConvertSurfaceFormat(SDL_Surface *surface, Uint32 pixel_format)
{
    SDL_ConvertSurfaceFormat(surface, pixel_format, 0);
}

#define PG_ConvertSurfaceFormat SDL_ConvertSurfaceFormat

#define PG_RWWRITE SDL_RWwrite
#endif

#if IS_SDLv3

#define PG_AtomicInt SDL_AtomicInt
#define PG_GetAudioStreamAvailable SDL_GetAudioStreamAvailable
#define PG_ClearAudioStream SDL_ClearAudioStream
#define PG_FlushAudioStream SDL_FlushAudioStream
#define PG_GetAudioStreamData SDL_GetAudioStreamData
#define PG_PutAudioStreamData SDL_PutAudioStreamData
#define PG_DestroyAudioStream SDL_DestroyAudioStream
#define PG_free SDL_free
#define PG_CreateAudioStream SDL_CreateAudioStream
#define PG_EVENT_DID_ENTER_BACKGROUND SDL_EVENT_DID_ENTER_BACKGROUND
#define PG_EVENT_DID_ENTER_FOREGROUND SDL_EVENT_DID_ENTER_FOREGROUND
#define PG_EVENT_LOW_MEMORY SDL_EVENT_LOW_MEMORY
#define PG_EVENT_TERMINATING SDL_EVENT_TERMINATING
#define PG_EVENT_WILL_ENTER_BACKGROUND SDL_EVENT_WILL_ENTER_BACKGROUND
#define PG_EVENT_WILL_ENTER_FOREGROUND SDL_EVENT_WILL_ENTER_FOREGROUND
#define PG_EVENT_AUDIO_DEVICE_ADDED SDL_EVENT_AUDIO_DEVICE_ADDED
#define PG_EVENT_AUDIO_DEVICE_REMOVED SDL_EVENT_AUDIO_DEVICE_REMOVED
#define PG_EVENT_CLIPBOARD_UPDATE SDL_EVENT_CLIPBOARD_UPDATE
#define PG_EVENT_GAMEPAD_AXIS_MOTION SDL_EVENT_GAMEPAD_AXIS_MOTION
#define PG_EVENT_GAMEPAD_BUTTON_DOWN SDL_EVENT_GAMEPAD_BUTTON_DOWN
#define PG_EVENT_GAMEPAD_BUTTON_UP SDL_EVENT_GAMEPAD_BUTTON_UP
#define PG_EVENT_GAMEPAD_ADDED SDL_EVENT_GAMEPAD_ADDED
#define PG_EVENT_GAMEPAD_REMAPPED SDL_EVENT_GAMEPAD_REMAPPED
#define PG_EVENT_GAMEPAD_REMOVED SDL_EVENT_GAMEPAD_REMOVED
#define PG_EVENT_GAMEPAD_SENSOR_UPDATE SDL_EVENT_GAMEPAD_SENSOR_UPDATE
#define PG_EVENT_GAMEPAD_TOUCHPAD_DOWN SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN
#define PG_EVENT_GAMEPAD_TOUCHPAD_MOTION SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION
#define PG_EVENT_GAMEPAD_TOUCHPAD_UP SDL_EVENT_GAMEPAD_TOUCHPAD_UP
#define PG_GamepadAxisEvent SDL_GamepadAxisEvent
#define PG_GamepadButtonEvent SDL_GamepadButtonEvent
#define PG_GamepadDeviceEvent SDL_GamepadDeviceEvent
#define PG_GamepadSensorEvent SDL_GamepadSensorEvent
#define PG_GamepadTouchpadEvent SDL_GamepadTouchpadEvent
#define PG_EVENT_DISPLAY_CONNECTED SDL_EVENT_DISPLAY_CONNECTED
#define PG_EVENT_DISPLAY_DISCONNECTED SDL_EVENT_DISPLAY_DISCONNECTED
#define PG_EVENT_DISPLAY_MOVED SDL_EVENT_DISPLAY_MOVED
#define PG_EVENT_DISPLAY_ORIENTATION SDL_EVENT_DISPLAY_ORIENTATION
#define PG_EVENT_DROP_BEGIN SDL_EVENT_DROP_BEGIN
#define PG_EVENT_DROP_COMPLETE SDL_EVENT_DROP_COMPLETE
#define PG_EVENT_DROP_FILE SDL_EVENT_DROP_FILE
#define PG_EVENT_DROP_TEXT SDL_EVENT_DROP_TEXT
#define PG_EVENT_FINGER_DOWN SDL_EVENT_FINGER_DOWN
#define PG_EVENT_FINGER_MOTION SDL_EVENT_FINGER_MOTION
#define PG_EVENT_FINGER_UP SDL_EVENT_FINGER_UP
#define PG_EVENT_FIRST SDL_EVENT_FIRST
#define PG_EVENT_JOYSTICK_AXIS_MOTION SDL_EVENT_JOYSTICK_AXIS_MOTION
#define PG_EVENT_JOYSTICK_BATTERY_UPDATED SDL_EVENT_JOYSTICK_BATTERY_UPDATED
#define PG_EVENT_JOYSTICK_BUTTON_DOWN SDL_EVENT_JOYSTICK_BUTTON_DOWN
#define PG_EVENT_JOYSTICK_BUTTON_UP SDL_EVENT_JOYSTICK_BUTTON_UP
#define PG_EVENT_JOYSTICK_ADDED SDL_EVENT_JOYSTICK_ADDED
#define PG_EVENT_JOYSTICK_REMOVED SDL_EVENT_JOYSTICK_REMOVED
#define PG_EVENT_JOYSTICK_HAT_MOTION SDL_EVENT_JOYSTICK_HAT_MOTION
#define PG_EVENT_KEY_DOWN SDL_EVENT_KEY_DOWN
#define PG_EVENT_KEYMAP_CHANGED SDL_EVENT_KEYMAP_CHANGED
#define PG_EVENT_KEY_UP SDL_EVENT_KEY_UP
#define PG_EVENT_LAST SDL_EVENT_LAST
#define PG_EVENT_LOCALE_CHANGED SDL_EVENT_LOCALE_CHANGED
#define PG_EVENT_MOUSE_BUTTON_DOWN SDL_EVENT_MOUSE_BUTTON_DOWN
#define PG_EVENT_MOUSE_BUTTON_UP SDL_EVENT_MOUSE_BUTTON_UP
#define PG_EVENT_MOUSE_MOTION SDL_EVENT_MOUSE_MOTION
#define PG_EVENT_MOUSE_WHEEL SDL_EVENT_MOUSE_WHEEL
#define PG_EVENT_POLL_SENTINEL SDL_EVENT_POLL_SENTINEL
#define PG_EVENT_QUIT SDL_EVENT_QUIT
#define PG_EVENT_RENDER_DEVICE_RESET SDL_EVENT_RENDER_DEVICE_RESET
#define PG_EVENT_RENDER_TARGETS_RESET SDL_EVENT_RENDER_TARGETS_RESET
#define PG_EVENT_SENSOR_UPDATE SDL_EVENT_SENSOR_UPDATE
#define PG_EVENT_SYSWM SDL_EVENT_SYSWM
#define PG_EVENT_TEXT_EDITING SDL_EVENT_TEXT_EDITING
#define PG_EVENT_TEXT_EDITING_EXT SDL_EVENT_TEXT_EDITING_EXT
#define PG_EVENT_TEXT_INPUT SDL_EVENT_TEXT_INPUT
#define PG_EVENT_USER SDL_EVENT_USER
#define PG_EVENT_WINDOW_CLOSE_REQUESTED SDL_EVENT_WINDOW_CLOSE_REQUESTED
#define PG_EVENT_WINDOW_DISPLAY_CHANGED SDL_EVENT_WINDOW_DISPLAY_CHANGED
#define PG_EVENT_WINDOW_MOUSE_ENTER SDL_EVENT_WINDOW_MOUSE_ENTER
#define PG_EVENT_WINDOW_EXPOSED SDL_EVENT_WINDOW_EXPOSED
#define PG_EVENT_WINDOW_FOCUS_GAINED SDL_EVENT_WINDOW_FOCUS_GAINED
#define PG_EVENT_WINDOW_FOCUS_LOST SDL_EVENT_WINDOW_FOCUS_LOST
#define PG_EVENT_WINDOW_HIDDEN SDL_EVENT_WINDOW_HIDDEN
#define PG_EVENT_WINDOW_HIT_TEST SDL_EVENT_WINDOW_HIT_TEST
#define PG_EVENT_WINDOW_ICCPROF_CHANGED SDL_EVENT_WINDOW_ICCPROF_CHANGED
#define PG_EVENT_WINDOW_MOUSE_LEAVE SDL_EVENT_WINDOW_MOUSE_LEAVE
#define PG_EVENT_WINDOW_MAXIMIZED SDL_EVENT_WINDOW_MAXIMIZED
#define PG_EVENT_WINDOW_MINIMIZED SDL_EVENT_WINDOW_MINIMIZED
#define PG_EVENT_WINDOW_MOVED SDL_EVENT_WINDOW_MOVED
#define PG_EVENT_WINDOW_RESIZED SDL_EVENT_WINDOW_RESIZED
#define PG_EVENT_WINDOW_RESTORED SDL_EVENT_WINDOW_RESTORED
#define PG_EVENT_WINDOW_SHOWN SDL_EVENT_WINDOW_SHOWN
#define PG_EVENT_WINDOW_PIXEL_SIZE_CHANGED SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED
#define PG_EVENT_WINDOW_TAKE_FOCUS SDL_EVENT_WINDOW_TAKE_FOCUS
#define PG_GAMEPAD_AXIS_INVALID SDL_GAMEPAD_AXIS_INVALID
#define PG_GAMEPAD_AXIS_LEFTX SDL_GAMEPAD_AXIS_LEFTX
#define PG_GAMEPAD_AXIS_LEFTY SDL_GAMEPAD_AXIS_LEFTY
#define PG_GAMEPAD_AXIS_MAX SDL_GAMEPAD_AXIS_MAX
#define PG_GAMEPAD_AXIS_RIGHTX SDL_GAMEPAD_AXIS_RIGHTX
#define PG_GAMEPAD_AXIS_RIGHTY SDL_GAMEPAD_AXIS_RIGHTY
#define PG_GAMEPAD_AXIS_LEFT_TRIGGER SDL_GAMEPAD_AXIS_LEFT_TRIGGER
#define PG_GAMEPAD_AXIS_RIGHT_TRIGGER SDL_GAMEPAD_AXIS_RIGHT_TRIGGER
#define PG_GAMEPAD_BINDTYPE_AXIS SDL_GAMEPAD_BINDTYPE_AXIS
#define PG_GAMEPAD_BINDTYPE_BUTTON SDL_GAMEPAD_BINDTYPE_BUTTON
#define PG_GAMEPAD_BINDTYPE_HAT SDL_GAMEPAD_BINDTYPE_HAT
#define PG_GAMEPAD_BINDTYPE_NONE SDL_GAMEPAD_BINDTYPE_NONE
#define PG_GAMEPAD_BUTTON_A SDL_GAMEPAD_BUTTON_A
#define PG_GAMEPAD_BUTTON_B SDL_GAMEPAD_BUTTON_B
#define PG_GAMEPAD_BUTTON_BACK SDL_GAMEPAD_BUTTON_BACK
#define PG_GAMEPAD_BUTTON_DPAD_DOWN SDL_GAMEPAD_BUTTON_DPAD_DOWN
#define PG_GAMEPAD_BUTTON_DPAD_LEFT SDL_GAMEPAD_BUTTON_DPAD_LEFT
#define PG_GAMEPAD_BUTTON_DPAD_RIGHT SDL_GAMEPAD_BUTTON_DPAD_RIGHT
#define PG_GAMEPAD_BUTTON_DPAD_UP SDL_GAMEPAD_BUTTON_DPAD_UP
#define PG_GAMEPAD_BUTTON_GUIDE SDL_GAMEPAD_BUTTON_GUIDE
#define PG_GAMEPAD_BUTTON_INVALID SDL_GAMEPAD_BUTTON_INVALID
#define PG_GAMEPAD_BUTTON_LEFT_SHOULDER SDL_GAMEPAD_BUTTON_LEFT_SHOULDER
#define PG_GAMEPAD_BUTTON_LEFT_STICK SDL_GAMEPAD_BUTTON_LEFT_STICK
#define PG_GAMEPAD_BUTTON_MAX SDL_GAMEPAD_BUTTON_MAX
#define PG_GAMEPAD_BUTTON_MISC1 SDL_GAMEPAD_BUTTON_MISC1
#define PG_GAMEPAD_BUTTON_PADDLE1 SDL_GAMEPAD_BUTTON_PADDLE1
#define PG_GAMEPAD_BUTTON_PADDLE2 SDL_GAMEPAD_BUTTON_PADDLE2
#define PG_GAMEPAD_BUTTON_PADDLE3 SDL_GAMEPAD_BUTTON_PADDLE3
#define PG_GAMEPAD_BUTTON_PADDLE4 SDL_GAMEPAD_BUTTON_PADDLE4
#define PG_GAMEPAD_BUTTON_RIGHT_SHOULDER SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER
#define PG_GAMEPAD_BUTTON_RIGHT_STICK SDL_GAMEPAD_BUTTON_RIGHT_STICK
#define PG_GAMEPAD_BUTTON_START SDL_GAMEPAD_BUTTON_START
#define PG_GAMEPAD_BUTTON_TOUCHPAD SDL_GAMEPAD_BUTTON_TOUCHPAD
#define PG_GAMEPAD_BUTTON_X SDL_GAMEPAD_BUTTON_X
#define PG_GAMEPAD_BUTTON_Y SDL_GAMEPAD_BUTTON_Y
#define PG_GAMEPAD_TYPE_AMAZON_LUNA SDL_GAMEPAD_TYPE_AMAZON_LUNA
#define PG_GAMEPAD_TYPE_GOOGLE_STADIA SDL_GAMEPAD_TYPE_GOOGLE_STADIA
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT \
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR \
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT \
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT
#define PG_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO \
    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO
#define PG_GAMEPAD_TYPE_NVIDIA_SHIELD SDL_GAMEPAD_TYPE_NVIDIA_SHIELD
#define PG_GAMEPAD_TYPE_PS3 SDL_GAMEPAD_TYPE_PS3
#define PG_GAMEPAD_TYPE_PS4 SDL_GAMEPAD_TYPE_PS4
#define PG_GAMEPAD_TYPE_PS5 SDL_GAMEPAD_TYPE_PS5
#define PG_GAMEPAD_TYPE_UNKNOWN SDL_GAMEPAD_TYPE_UNKNOWN
#define PG_GAMEPAD_TYPE_VIRTUAL SDL_GAMEPAD_TYPE_VIRTUAL
#define PG_GAMEPAD_TYPE_XBOX360 SDL_GAMEPAD_TYPE_XBOX360
#define PG_GAMEPAD_TYPE_XBOXONE SDL_GAMEPAD_TYPE_XBOXONE
#define PG_Gamepad SDL_Gamepad
#define PG_AddGamepadMapping SDL_AddGamepadMapping
#define PG_AddGamepadMappingsFromFile SDL_AddGamepadMappingsFromFile
#define PG_AddGamepadMappingsFromRW SDL_AddGamepadMappingsFromRW
#define PG_GamepadAxis SDL_GamepadAxis
#define PG_GamepadBindingType SDL_GamepadBindingType
#define PG_GamepadButton SDL_GamepadButton
#define PG_GamepadBinding SDL_GamepadBinding
#define PG_CloseGamepad SDL_CloseGamepad
#define PG_GetGamepadFromInstanceID SDL_GetGamepadFromInstanceID
#define PG_GetGamepadFromPlayerIndex SDL_GetGamepadFromPlayerIndex
#define PG_GetGamepadAppleSFSymbolsNameForAxis \
    SDL_GetGamepadAppleSFSymbolsNameForAxis
#define PG_GetGamepadAppleSFSymbolsNameForButton \
    SDL_GetGamepadAppleSFSymbolsNameForButton
#define PG_GamepadConnected SDL_GamepadConnected
#define PG_GetGamepadAxis SDL_GetGamepadAxis
#define PG_GetGamepadAxisFromString SDL_GetGamepadAxisFromString
#define PG_GetGamepadBindForAxis SDL_GetGamepadBindForAxis
#define PG_GetGamepadBindForButton SDL_GetGamepadBindForButton
#define PG_GetGamepadButton SDL_GetGamepadButton
#define PG_GetGamepadButtonFromString SDL_GetGamepadButtonFromString
#define PG_GetGamepadFirmwareVersion SDL_GetGamepadFirmwareVersion
#define PG_GetGamepadJoystick SDL_GetGamepadJoystick
#define PG_GetNumGamepadTouchpadFingers SDL_GetNumGamepadTouchpadFingers
#define PG_GetNumGamepadTouchpads SDL_GetNumGamepadTouchpads
#define PG_GetGamepadPlayerIndex SDL_GetGamepadPlayerIndex
#define PG_GetGamepadProduct SDL_GetGamepadProduct
#define PG_GetGamepadProductVersion SDL_GetGamepadProductVersion
#define PG_GetGamepadSensorData SDL_GetGamepadSensorData
#define PG_GetGamepadSensorDataRate SDL_GetGamepadSensorDataRate
#define PG_GetGamepadSerial SDL_GetGamepadSerial
#define PG_GetGamepadStringForAxis SDL_GetGamepadStringForAxis
#define PG_GetGamepadStringForButton SDL_GetGamepadStringForButton
#define PG_GetGamepadTouchpadFinger SDL_GetGamepadTouchpadFinger
#define PG_GetGamepadType SDL_GetGamepadType
#define PG_GetGamepadVendor SDL_GetGamepadVendor
#define PG_GamepadHasAxis SDL_GamepadHasAxis
#define PG_GamepadHasButton SDL_GamepadHasButton
#define PG_GamepadHasLED SDL_GamepadHasLED
#define PG_GamepadHasRumble SDL_GamepadHasRumble
#define PG_GamepadHasRumbleTriggers SDL_GamepadHasRumbleTriggers
#define PG_GamepadHasSensor SDL_GamepadHasSensor
#define PG_GamepadSensorEnabled SDL_GamepadSensorEnabled
#define PG_GetGamepadMapping SDL_GetGamepadMapping
#define PG_GetGamepadMappingForGUID SDL_GetGamepadMappingForGUID
#define PG_GetGamepadMappingForIndex SDL_GetGamepadMappingForIndex
#define PG_GetGamepadName SDL_GetGamepadName
#define PG_GetNumGamepadMappings SDL_GetNumGamepadMappings
#define PG_OpenGamepad SDL_OpenGamepad
#define PG_GetGamepadPath SDL_GetGamepadPath
#define PG_RumbleGamepad SDL_RumbleGamepad
#define PG_RumbleGamepadTriggers SDL_RumbleGamepadTriggers
#define PG_SendGamepadEffect SDL_SendGamepadEffect
#define PG_SetGamepadLED SDL_SetGamepadLED
#define PG_SetGamepadPlayerIndex SDL_SetGamepadPlayerIndex
#define PG_SetGamepadSensorEnabled SDL_SetGamepadSensorEnabled
#define PG_GamepadType SDL_GamepadType
#define PG_UpdateGamepads SDL_UpdateGamepads
#define PG_INIT_GAMEPAD SDL_INIT_GAMEPAD
#define PG_IsGamepad SDL_IsGamepad
#define PG_JOYSTICK_TYPE_GAMEPAD SDL_JOYSTICK_TYPE_GAMEPAD
#define PG_AttachVirtualJoystick SDL_AttachVirtualJoystick
#define PG_AttachVirtualJoystickEx SDL_AttachVirtualJoystickEx
#define PG_CloseJoystick SDL_CloseJoystick
#define PG_GetJoystickPowerLevel SDL_GetJoystickPowerLevel
#define PG_DetachVirtualJoystick SDL_DetachVirtualJoystick
#define PG_GetJoystickFromInstanceID SDL_GetJoystickFromInstanceID
#define PG_GetJoystickFromPlayerIndex SDL_GetJoystickFromPlayerIndex
#define PG_JoystickConnected SDL_JoystickConnected
#define PG_GetJoystickAxis SDL_GetJoystickAxis
#define PG_GetJoystickAxisInitialState SDL_GetJoystickAxisInitialState
#define PG_GetJoystickButton SDL_GetJoystickButton
#define PG_GetJoystickFirmwareVersion SDL_GetJoystickFirmwareVersion
#define PG_GetJoystickGUID SDL_GetJoystickGUID
#define PG_GetJoystickGUIDFromString SDL_GetJoystickGUIDFromString
#define PG_GetJoystickGUIDString SDL_GetJoystickGUIDString
#define PG_GetJoystickHat SDL_GetJoystickHat
#define PG_GetJoystickPlayerIndex SDL_GetJoystickPlayerIndex
#define PG_GetJoystickProduct SDL_GetJoystickProduct
#define PG_GetJoystickProductVersion SDL_GetJoystickProductVersion
#define PG_GetJoystickSerial SDL_GetJoystickSerial
#define PG_GetJoystickType SDL_GetJoystickType
#define PG_GetJoystickVendor SDL_GetJoystickVendor
#define PG_GetJoystickInstanceID SDL_GetJoystickInstanceID
#define PG_IsJoystickVirtual SDL_IsJoystickVirtual
#define PG_GetJoystickName SDL_GetJoystickName
#define PG_GetNumJoystickAxes SDL_GetNumJoystickAxes
#define PG_GetNumJoystickButtons SDL_GetNumJoystickButtons
#define PG_GetNumJoystickHats SDL_GetNumJoystickHats
#define PG_OpenJoystick SDL_OpenJoystick
#define PG_GetJoystickPath SDL_GetJoystickPath
#define PG_RumbleJoystick SDL_RumbleJoystick
#define PG_RumbleJoystickTriggers SDL_RumbleJoystickTriggers
#define PG_SendJoystickEffect SDL_SendJoystickEffect
#define PG_SetJoystickLED SDL_SetJoystickLED
#define PG_SetJoystickPlayerIndex SDL_SetJoystickPlayerIndex
#define PG_SetJoystickVirtualAxis SDL_SetJoystickVirtualAxis
#define PG_SetJoystickVirtualButton SDL_SetJoystickVirtualButton
#define PG_SetJoystickVirtualHat SDL_SetJoystickVirtualHat
#define PG_UpdateJoysticks SDL_UpdateJoysticks
#define PG_ScreenKeyboardShown SDL_ScreenKeyboardShown
#define PG_TextInputActive SDL_TextInputActive
#define PG_TextInputShown SDL_TextInputShown
#define PG_KMOD_ALT SDL_KMOD_ALT
#define PG_KMOD_CAPS SDL_KMOD_CAPS
#define PG_KMOD_CTRL SDL_KMOD_CTRL
#define PG_KMOD_GUI SDL_KMOD_GUI
#define PG_KMOD_LALT SDL_KMOD_LALT
#define PG_KMOD_LCTRL SDL_KMOD_LCTRL
#define PG_KMOD_LGUI SDL_KMOD_LGUI
#define PG_KMOD_LSHIFT SDL_KMOD_LSHIFT
#define PG_KMOD_MODE SDL_KMOD_MODE
#define PG_KMOD_NONE SDL_KMOD_NONE
#define PG_KMOD_NUM SDL_KMOD_NUM
#define PG_KMOD_RALT SDL_KMOD_RALT
#define PG_KMOD_RCTRL SDL_KMOD_RCTRL
#define PG_KMOD_RESERVED SDL_KMOD_RESERVED
#define PG_KMOD_RGUI SDL_KMOD_RGUI
#define PG_KMOD_RSHIFT SDL_KMOD_RSHIFT
#define PG_KMOD_SCROLL SDL_KMOD_SCROLL
#define PG_KMOD_SHIFT SDL_KMOD_SHIFT
#define PG_DestroyCursor SDL_DestroyCursor
#define PG_CreatePixelFormat SDL_CreatePixelFormat
#define PG_CreatePalette SDL_CreatePalette
#define PG_DestroyPixelFormat SDL_DestroyPixelFormat
#define PG_DestroyPalette SDL_DestroyPalette
#define PG_GetPixelFormatEnumForMasks SDL_GetPixelFormatEnumForMasks
#define PG_GetMasksForPixelFormatEnum SDL_GetMasksForPixelFormatEnum
#define PG___IOS__ __IOS__
#define PG___MACOS__ __MACOS__
#define PG_GetRectEnclosingPointsFloat SDL_GetRectEnclosingPointsFloat
#define PG_GetRectEnclosingPoints SDL_GetRectEnclosingPoints
#define PG_RectEmptyFloat SDL_RectEmptyFloat
#define PG_RectsEqualFloat SDL_RectsEqualFloat
#define PG_RectsEqualEpsilon SDL_RectsEqualEpsilon
#define PG_HasRectIntersection SDL_HasRectIntersection
#define PG_HasRectIntersectionFloat SDL_HasRectIntersectionFloat
#define PG_GetRectIntersectionFloat SDL_GetRectIntersectionFloat
#define PG_GetRectAndLineIntersectionFloat SDL_GetRectAndLineIntersectionFloat
#define PG_GetRectIntersection SDL_GetRectIntersection
#define PG_GetRectAndLineIntersection SDL_GetRectAndLineIntersection
#define PG_PointInRectFloat SDL_PointInRectFloat
#define PG_RectsEqual SDL_RectsEqual
#define PG_GetRectUnionFloat SDL_GetRectUnionFloat
#define PG_GetRectUnion SDL_GetRectUnion
#define PG_GetCurrentRenderOutputSize SDL_GetCurrentRenderOutputSize
#define PG_RenderTextureRotated SDL_RenderTextureRotated
#define PG_RenderTexture SDL_RenderTexture
#define PG_RenderLine SDL_RenderLine
#define PG_RenderLines SDL_RenderLines
#define PG_RenderPoint SDL_RenderPoint
#define PG_RenderPoints SDL_RenderPoints
#define PG_RenderRect SDL_RenderRect
#define PG_RenderRects SDL_RenderRects
#define PG_RenderFillRect SDL_RenderFillRect
#define PG_RenderFillRects SDL_RenderFillRects
#define PG_GetRenderClipRect SDL_GetRenderClipRect
#define PG_GetRenderLogicalPresentation SDL_GetRenderLogicalPresentation
#define PG_GetRenderMetalCommandEncoder SDL_GetRenderMetalCommandEncoder
#define PG_GetRenderMetalLayer SDL_GetRenderMetalLayer
#define PG_GetRenderScale SDL_GetRenderScale
#define PG_GetRenderViewport SDL_GetRenderViewport
#define PG_GetRenderWindow SDL_GetRenderWindow
#define PG_RenderClipEnabled SDL_RenderClipEnabled
#define PG_RenderCoordinatesToWindow SDL_RenderCoordinatesToWindow
#define PG_SetRenderClipRect SDL_SetRenderClipRect
#define PG_SetRenderLogicalPresentation SDL_SetRenderLogicalPresentation
#define PG_SetRenderScale SDL_SetRenderScale
#define PG_SetRenderVSync SDL_SetRenderVSync
#define PG_SetRenderViewport SDL_SetRenderViewport
#define PG_RenderCoordinatesFromWindow SDL_RenderCoordinatesFromWindow
#define PG_SCALEMODE_BEST SDL_SCALEMODE_BEST
#define PG_SCALEMODE_LINEAR SDL_SCALEMODE_LINEAR
#define PG_SCALEMODE_NEAREST SDL_SCALEMODE_NEAREST
#define PG_RW_SEEK_CUR SDL_RW_SEEK_CUR
#define PG_RW_SEEK_END SDL_RW_SEEK_END
#define PG_RW_SEEK_SET SDL_RW_SEEK_SET
#define PG_CreateRW SDL_CreateRW
#define PG_DestroyRW SDL_DestroyRW
#define PG_CloseSensor SDL_CloseSensor
#define PG_GetSensorFromInstanceID SDL_GetSensorFromInstanceID
#define PG_GetSensorData SDL_GetSensorData
#define PG_GetSensorInstanceID SDL_GetSensorInstanceID
#define PG_GetSensorName SDL_GetSensorName
#define PG_GetSensorNonPortableType SDL_GetSensorNonPortableType
#define PG_GetSensorType SDL_GetSensorType
#define PG_OpenSensor SDL_OpenSensor
#define PG_UpdateSensors SDL_UpdateSensors
#define PG_FillSurfaceRect SDL_FillSurfaceRect
#define PG_FillSurfaceRects SDL_FillSurfaceRects
#define PG_DestroySurface SDL_DestroySurface
#define PG_GetSurfaceClipRect SDL_GetSurfaceClipRect
#define PG_GetSurfaceColorKey SDL_GetSurfaceColorKey
#define PG_SurfaceHasColorKey SDL_SurfaceHasColorKey
#define PG_SurfaceHasRLE SDL_SurfaceHasRLE
#define PG_BlitSurfaceUnchecked SDL_BlitSurfaceUnchecked
#define PG_BlitSurfaceUncheckedScaled SDL_BlitSurfaceUncheckedScaled
#define PG_SetSurfaceClipRect SDL_SetSurfaceClipRect
#define PG_SetSurfaceColorKey SDL_SetSurfaceColorKey
#define PG_BlitSurface SDL_BlitSurface
#define PG_BlitSurfaceScaled SDL_BlitSurfaceScaled
#define PG_GetRenderD3D11Device SDL_GetRenderD3D11Device
#define PG_GetRenderD3D9Device SDL_GetRenderD3D9Device
#define PG_GetTicks SDL_GetTicks
#define PG_GetClosestFullscreenDisplayMode SDL_GetClosestFullscreenDisplayMode
#define PG_GetDisplayForPoint SDL_GetDisplayForPoint
#define PG_GetDisplayForRect SDL_GetDisplayForRect
#define PG_GetDisplayForWindow SDL_GetDisplayForWindow
#define PG_GetWindowFullscreenMode SDL_GetWindowFullscreenMode
#define PG_ScreenSaverEnabled SDL_ScreenSaverEnabled
#define PG_SetWindowFullscreenMode SDL_SetWindowFullscreenMode
#define PG_WINDOW_MOUSE_GRABBED SDL_WINDOW_MOUSE_GRABBED
#define PG_INIT_NOPARACHUTE 0
#define PG_NOSDL3_JOYBALLMOTION 0
#define PG_NOSDL3_MULTIGESTURE 0
#define PG_NOSDL3_AUDIO_U16LSB 0
#define PG_NOSDL3_AUDIO_U16MSB 0
#define PG_NOSDL3_AUDIO_U16 0
#define PG_NOSDL3_AUDIO_U16SYS 0
#define PG_NOSDL3_WINDOW_SHOWN 0

static int
PG_GetCurrentDisplayMode(int index, SDL_DisplayMode *mode)
{
    SDL_DisplayMode *_cdm = SDL_GetCurrentDisplayMode(index);
    if (_cdm == NULL) {
        return -1;
    }
    memcpy(mode, _cdm, sizeof(SDL_DisplayMode));
    SDL_free(_cdm);
    return 0;
}

static int
PG_GetDesktopDisplayMode(int index, SDL_DisplayMode *mode)
{
    SDL_DisplayMode *_ddm = SDL_GetDesktopDisplayMode(index);
    if (_ddm == NULL) {
        return -1;
    }
    memcpy(mode, _ddm, sizeof(SDL_DisplayMode));
    SDL_free(_ddm);
    return 0;
}

#define PG_DISPLAY_MODE_W pixel_w
#define PG_DISPLAY_MODE_H pixel_h

static int
PG_NOSDL3_SetWindowGammaRamp(SDL_Window *window, const Uint16 *red,
                             const Uint16 *green, const Uint16 *blue)
{
    SDL_SetError("Not supported in SDL3");
    return -1;
}

static int
PG_NOSDL3_CalculateGammaRamp(float gamma, Uint16 *ramp)
{
    return 0; /* no-op*/
}

#include <SDL_syswm.h>

static int
PG_GetWindowWMInfo(SDL_Window *win, SDL_SysWMinfo *info)
{
    return SDL_GetWindowWMInfo(win, info, SDL_SYSWM_CURRENT_VERSION);
}

#define PG_IS_WINDOWEVENT(eventtype) \
    (eventtype >= SDL_EVENT_WINDOW_FIRST && eventtype <= SDL_EVENT_WINDOW_LAST)

#define PG_EXTRACT_WINDOWEVENT_TYPE(event) event->type

#define PG_CreateSurface SDL_CreateSurface
#define PG_CreateSurfaceFrom SDL_CreateSurfaceFrom

#define PG_GetGlobalMouseState SDL_GetGlobalMouseState
#define PG_GetMouseState SDL_GetMouseState
#define PG_GetRelativeMouseState SDL_GetRelativeMouseState

#define PG_CreateWindowWithPosition SDL_CreateWindowWithPosition

#define PG_CreateDefaultBackendRenderer(win, flags) \
    SDL_CreateRenderer(win, NULL, flags)

#define PG_NOSDL3_HACK_WINDOW_FULLSCREEN_DESKTOP SDL_WINDOW_FULLSCREEN

static int
PG_GL_GetSwapInterval()
{
    int _interval;
    return SDL_GL_GetSwapInterval(&_interval);
}
#define PG_GL_GetWindowSizeInPixels SDL_GetWindowSizeInPixels

static int
PG_GetNumVideoDisplays()
{
    int count;
    SDL_DisplayID *displays = SDL_GetDisplays(&count);
    if (displays == NULL) {
        return -1;
    }
    SDL_free(displays);
    return count;
}

#define PG_ShowCursor SDL_ShowCursor
#define PG_HideCursor SDL_HideCursor
#define PG_CursorVisible SDL_CursorVisible

#define PG_EventEnabled SDL_EventEnabled
#define PG_SetEventEnabled SDL_SetEventEnabled

#define PG_GetJoystickInstanceGUID SDL_GetJoystickInstanceGUID

#define PG_GAXIS gaxis
#define PG_GBUTTON gbutton
#define PG_GDEVICE gdevice
#define PG_GTOUCHPAD gtouchpad
#define PG_GSENSOR gsensor

#define PG_ConvertSurface SDL_ConvertSurface
#define PG_ConvertSurfaceFormat SDL_ConvertSurfaceFormat

#define PG_RWWRITE(context, ptr, size, num) SDL_RWwrite(context, ptr, size*num)
#endif

/* SDL 1.2 constants removed from SDL 2 */
typedef enum {
    SDL_HWSURFACE = 0,
    SDL_RESIZABLE = SDL_WINDOW_RESIZABLE,
    SDL_ASYNCBLIT = 0,
    SDL_OPENGL = SDL_WINDOW_OPENGL,
    SDL_OPENGLBLIT = 0,
    SDL_ANYFORMAT = 0,
    SDL_HWPALETTE = 0,
    SDL_DOUBLEBUF = 0,
    SDL_FULLSCREEN = SDL_WINDOW_FULLSCREEN,
    SDL_HWACCEL = 0,
    SDL_SRCCOLORKEY = 0,
    SDL_RLEACCELOK = 0,
    SDL_SRCALPHA = 0,
    SDL_NOFRAME = SDL_WINDOW_BORDERLESS,
    SDL_GL_SWAP_CONTROL = 0,
    TIMER_RESOLUTION = 0
} PygameVideoFlags;

/* the wheel button constants were removed from SDL 2 */
typedef enum {
    PGM_BUTTON_LEFT = SDL_BUTTON_LEFT,
    PGM_BUTTON_RIGHT = SDL_BUTTON_RIGHT,
    PGM_BUTTON_MIDDLE = SDL_BUTTON_MIDDLE,
    PGM_BUTTON_WHEELUP = 4,
    PGM_BUTTON_WHEELDOWN = 5,
    PGM_BUTTON_X1 = SDL_BUTTON_X1 + 2,
    PGM_BUTTON_X2 = SDL_BUTTON_X2 + 2,
    PGM_BUTTON_KEEP = 0x80
} PygameMouseFlags;

typedef enum {
    /* Any SDL_* events here are for backward compatibility. */
    SDL_NOEVENT = 0,

    SDL_ACTIVEEVENT = PG_EVENT_USER,
    SDL_VIDEORESIZE,
    SDL_VIDEOEXPOSE,

    PGE_MIDIIN,
    PGE_MIDIOUT,
    PGE_KEYREPEAT, /* Special internal pygame event, for managing key-presses
                    */

    /* DO NOT CHANGE THE ORDER OF EVENTS HERE */
    PGE_WINDOWSHOWN,
    PGE_WINDOWHIDDEN,
    PGE_WINDOWEXPOSED,
    PGE_WINDOWMOVED,
    PGE_WINDOWRESIZED,
    PGE_WINDOWSIZECHANGED,
    PGE_WINDOWMINIMIZED,
    PGE_WINDOWMAXIMIZED,
    PGE_WINDOWRESTORED,
    PGE_WINDOWENTER,
    PGE_WINDOWLEAVE,
    PGE_WINDOWFOCUSGAINED,
    PGE_WINDOWFOCUSLOST,
    PGE_WINDOWCLOSE,
    PGE_WINDOWTAKEFOCUS,
    PGE_WINDOWHITTEST,
    PGE_WINDOWICCPROFCHANGED,
    PGE_WINDOWDISPLAYCHANGED,

    /* Here we define PGPOST_* events, events that act as a one-to-one
     * proxy for SDL events (and some extra events too!), the proxy is used
     * internally when pygame users use event.post()
     *
     * At a first glance, these may look redundant, but they are really
     * important, especially with event blocking. If proxy events are
     * not there, blocked events dont make it to our event filter, and
     * that can break a lot of stuff.
     *
     * IMPORTANT NOTE: Do not post events directly with these proxy types,
     * use the appropriate functions from event.c, that handle these proxy
     * events for you.
     * Proxy events are for internal use only */
    PGPOST_EVENTBEGIN, /* mark start of proxy-events */
    PGPOST_ACTIVEEVENT = PGPOST_EVENTBEGIN,
    PGPOST_APP_TERMINATING,
    PGPOST_APP_LOWMEMORY,
    PGPOST_APP_WILLENTERBACKGROUND,
    PGPOST_APP_DIDENTERBACKGROUND,
    PGPOST_APP_WILLENTERFOREGROUND,
    PGPOST_APP_DIDENTERFOREGROUND,
    PGPOST_AUDIODEVICEADDED,
    PGPOST_AUDIODEVICEREMOVED,
    PGPOST_CLIPBOARDUPDATE,
    PGPOST_CONTROLLERAXISMOTION,
    PGPOST_CONTROLLERBUTTONDOWN,
    PGPOST_CONTROLLERBUTTONUP,
    PGPOST_CONTROLLERDEVICEADDED,
    PGPOST_CONTROLLERDEVICEREMOVED,
    PGPOST_CONTROLLERDEVICEREMAPPED,
    PGPOST_CONTROLLERTOUCHPADDOWN,
    PGPOST_CONTROLLERTOUCHPADMOTION,
    PGPOST_CONTROLLERTOUCHPADUP,
    PGPOST_CONTROLLERSENSORUPDATE,
    PGPOST_DOLLARGESTURE,
    PGPOST_DOLLARRECORD,
    PGPOST_DROPFILE,
    PGPOST_DROPTEXT,
    PGPOST_DROPBEGIN,
    PGPOST_DROPCOMPLETE,
    PGPOST_FINGERMOTION,
    PGPOST_FINGERDOWN,
    PGPOST_FINGERUP,
    PGPOST_KEYDOWN,
    PGPOST_KEYMAPCHANGED,
    PGPOST_KEYUP,
    PGPOST_JOYAXISMOTION,
    PGPOST_JOYBALLMOTION,
    PGPOST_JOYHATMOTION,
    PGPOST_JOYBUTTONDOWN,
    PGPOST_JOYBUTTONUP,
    PGPOST_JOYDEVICEADDED,
    PGPOST_JOYDEVICEREMOVED,
    PGPOST_LOCALECHANGED,
    PGPOST_MIDIIN,
    PGPOST_MIDIOUT,
    PGPOST_MOUSEMOTION,
    PGPOST_MOUSEBUTTONDOWN,
    PGPOST_MOUSEBUTTONUP,
    PGPOST_MOUSEWHEEL,
    PGPOST_MULTIGESTURE,
    PGPOST_NOEVENT,
    PGPOST_QUIT,
    PGPOST_RENDER_TARGETS_RESET,
    PGPOST_RENDER_DEVICE_RESET,
    PGPOST_SYSWMEVENT,
    PGPOST_TEXTEDITING,
    PGPOST_TEXTINPUT,
    PGPOST_VIDEORESIZE,
    PGPOST_VIDEOEXPOSE,
    PGPOST_WINDOWSHOWN,
    PGPOST_WINDOWHIDDEN,
    PGPOST_WINDOWEXPOSED,
    PGPOST_WINDOWMOVED,
    PGPOST_WINDOWRESIZED,
    PGPOST_WINDOWSIZECHANGED,
    PGPOST_WINDOWMINIMIZED,
    PGPOST_WINDOWMAXIMIZED,
    PGPOST_WINDOWRESTORED,
    PGPOST_WINDOWENTER,
    PGPOST_WINDOWLEAVE,
    PGPOST_WINDOWFOCUSGAINED,
    PGPOST_WINDOWFOCUSLOST,
    PGPOST_WINDOWCLOSE,
    PGPOST_WINDOWTAKEFOCUS,
    PGPOST_WINDOWHITTEST,
    PGPOST_WINDOWICCPROFCHANGED,
    PGPOST_WINDOWDISPLAYCHANGED,

    PGE_USEREVENT, /* this event must stay in this position only */

    PG_NUMEVENTS =
        PG_EVENT_LAST /* Not an event. Indicates end of user events. */
} PygameEventCode;

/* SDL1 ACTIVEEVENT state attribute can take the following values */
/* These constant values are directly picked from SDL1 source */
#define SDL_APPMOUSEFOCUS 0x01
#define SDL_APPINPUTFOCUS 0x02
#define SDL_APPACTIVE 0x04

/* Surface flags: based on SDL 1.2 flags */
typedef enum {
    PGS_SWSURFACE = 0x00000000,
    PGS_HWSURFACE = 0x00000001,
    PGS_ASYNCBLIT = 0x00000004,

    PGS_ANYFORMAT = 0x10000000,
    PGS_HWPALETTE = 0x20000000,
    PGS_DOUBLEBUF = 0x40000000,
    PGS_FULLSCREEN = 0x80000000,
    PGS_SCALED = 0x00000200,

    PGS_OPENGL = 0x00000002,
    PGS_OPENGLBLIT = 0x0000000A,
    PGS_RESIZABLE = 0x00000010,
    PGS_NOFRAME = 0x00000020,
    PGS_SHOWN = 0x00000040,  /* Added from SDL 2 */
    PGS_HIDDEN = 0x00000080, /* Added from SDL 2 */

    PGS_HWACCEL = 0x00000100,
    PGS_SRCCOLORKEY = 0x00001000,
    PGS_RLEACCELOK = 0x00002000,
    PGS_RLEACCEL = 0x00004000,
    PGS_SRCALPHA = 0x00010000,
    PGS_PREALLOC = 0x01000000
} PygameSurfaceFlags;

// TODO Implement check below in a way that does not break CI
/* New buffer protocol (PEP 3118) implemented on all supported Py versions.
#if !defined(Py_TPFLAGS_HAVE_NEWBUFFER)
#error No support for PEP 3118/Py_TPFLAGS_HAVE_NEWBUFFER. Please use a
supported Python version. #endif */

#define RAISE(x, y) (PyErr_SetString((x), (y)), NULL)
#define DEL_ATTR_NOT_SUPPORTED_CHECK(name, value)                            \
    do {                                                                     \
        if (!value) {                                                        \
            PyErr_Format(PyExc_AttributeError, "Cannot delete attribute %s", \
                         name);                                              \
            return -1;                                                       \
        }                                                                    \
    } while (0)

#define DEL_ATTR_NOT_SUPPORTED_CHECK_NO_NAME(value)                           \
    do {                                                                      \
        if (!value) {                                                         \
            PyErr_SetString(PyExc_AttributeError, "Cannot delete attribute"); \
            return -1;                                                        \
        }                                                                     \
    } while (0)

/*
 * Initialization checks
 */

#define VIDEO_INIT_CHECK()            \
    if (!SDL_WasInit(SDL_INIT_VIDEO)) \
    return RAISE(pgExc_SDLError, "video system not initialized")

#define JOYSTICK_INIT_CHECK()            \
    if (!SDL_WasInit(SDL_INIT_JOYSTICK)) \
    return RAISE(pgExc_SDLError, "joystick system not initialized")

/* thread check */
#ifdef WITH_THREAD
#define PG_CHECK_THREADS() (1)
#else /* ~WITH_THREAD */
#define PG_CHECK_THREADS() \
    (RAISE(PyExc_NotImplementedError, "Python built without thread support"))
#endif /* ~WITH_THREAD */

#define PyType_Init(x) (((x).ob_type) = &PyType_Type)

/* Update this function if new sequences are added to the fast sequence
 * type. */
#ifndef pgSequenceFast_Check
#define pgSequenceFast_Check(o) (PyList_Check(o) || PyTuple_Check(o))
#endif /* ~pgSequenceFast_Check */

/*
 * event module internals
 */
struct pgEventObject {
    PyObject_HEAD int type;
    PyObject *dict;
};

/*
 * surflock module internals
 */
typedef struct {
    PyObject_HEAD PyObject *surface;
    PyObject *lockobj;
    PyObject *weakrefs;
} pgLifetimeLockObject;

/*
 * surface module internals
 */
struct pgSubSurface_Data {
    PyObject *owner;
    int pixeloffset;
    int offsetx, offsety;
};

/*
 * color module internals
 */
struct pgColorObject {
    PyObject_HEAD Uint8 data[4];
    Uint8 len;
};

/*
 * include public API
 */
#include "include/_pygame.h"

/* Slot counts.
 * Remember to keep these constants up to date.
 */

#define PYGAMEAPI_RECT_NUMSLOTS 10
#define PYGAMEAPI_JOYSTICK_NUMSLOTS 2
#define PYGAMEAPI_DISPLAY_NUMSLOTS 2
#define PYGAMEAPI_SURFACE_NUMSLOTS 4
#define PYGAMEAPI_SURFLOCK_NUMSLOTS 8
#define PYGAMEAPI_RWOBJECT_NUMSLOTS 6
#define PYGAMEAPI_PIXELARRAY_NUMSLOTS 2
#define PYGAMEAPI_COLOR_NUMSLOTS 5
#define PYGAMEAPI_MATH_NUMSLOTS 2
#define PYGAMEAPI_BASE_NUMSLOTS 24
#define PYGAMEAPI_EVENT_NUMSLOTS 6

#endif /* _PYGAME_INTERNAL_H */
